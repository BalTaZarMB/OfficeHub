import{p as t}from"./chunk-TMUBEWPD-CCJVJshk.js";import{I as r}from"./chunk-KFBOBJHC-CKmt1T9R.js";import{D as e,_ as o,d as n,E as a,F as i,G as s,l as c,s as d,g as h,b as m,c as $,q as l,r as p,e as g,x as y,j as x,v as u,H as f}from"./index-BdBJDoqm.js";import{p as b}from"./gitGraph-YCYPL57B-BBBOe5ge.js";import"./index-CP9bbISh.js";import"./vue-CE51Rq-N.js";import"./arco-CSlgBs8T.js";/* empty css              *//* empty css              *//* empty css              *//* empty css              */import"./dom-w3hEyMar.js";import"./index-DLevhAQE.js";import"./dataModel-BAnfpXEG.js";import"./editor-erg3WYaJ.js";import"./file-5T113FlP.js";import"./dom2imgBlob-9Y9ueTAB.js";import"./mitt-DRzrVJO_.js";import"./regexp-get-flags-C7Uvd9jb.js";import"./index.esm-CMCG6-Sp.js";import"./_baseUniq-Bxycm4Lg.js";import"./_basePickBy-D9epjIkN.js";import"./clone-CQn5Fs9O.js";var w={NORMAL:0,REVERSE:1,HIGHLIGHT:2,MERGE:3,CHERRY_PICK:4},B=e.gitGraph,v=o((()=>a({...B,...i().gitGraph})),"getConfig"),E=new r((()=>{const t=v(),r=t.mainBranchName,e=t.mainBranchOrder;return{mainBranchName:r,commits:new Map,head:null,branchConfig:new Map([[r,{name:r,order:e}]]),branches:new Map([[r,null]]),currBranch:r,direction:"LR",seq:0,options:{}}}));function k(){return s({length:7})}function C(t,r){const e=Object.create(null);return t.reduce(((t,o)=>{const n=r(o);return e[n]||(e[n]=!0,t.push(o)),t}),[])}o(k,"getID"),o(C,"uniqBy");var L=o((function(t){E.records.direction=t}),"setDirection"),T=o((function(t){c.debug("options str",t),t=(t=null==t?void 0:t.trim())||"{}";try{E.records.options=JSON.parse(t)}catch(r){c.error("error while parsing gitGraph options",r.message)}}),"setOptions"),M=o((function(){return E.records.options}),"getOptions"),P=o((function(t){let r=t.msg,e=t.id;const o=t.type;let n=t.tags;c.info("commit",r,e,o,n),c.debug("Entering commit:",r,e,o,n);const a=v();e=g.sanitizeText(e,a),r=g.sanitizeText(r,a),n=null==n?void 0:n.map((t=>g.sanitizeText(t,a)));const i={id:e||E.records.seq+"-"+k(),message:r,seq:E.records.seq++,type:o??w.NORMAL,tags:n??[],parents:null==E.records.head?[]:[E.records.head.id],branch:E.records.currBranch};E.records.head=i,c.info("main branch",a.mainBranchName),E.records.commits.set(i.id,i),E.records.branches.set(E.records.currBranch,i.id),c.debug("in pushCommit "+i.id)}),"commit"),R=o((function(t){let r=t.name;const e=t.order;if(r=g.sanitizeText(r,v()),E.records.branches.has(r))throw new Error(`Trying to create an existing branch. (Help: Either use a new name if you want create a new branch or try using "checkout ${r}")`);E.records.branches.set(r,null!=E.records.head?E.records.head.id:null),E.records.branchConfig.set(r,{name:r,order:e}),j(r),c.debug("in createBranch")}),"branch"),I=o((t=>{let r=t.branch,e=t.id;const o=t.type,n=t.tags,a=v();r=g.sanitizeText(r,a),e&&(e=g.sanitizeText(e,a));const i=E.records.branches.get(E.records.currBranch),s=E.records.branches.get(r),d=i?E.records.commits.get(i):void 0,h=s?E.records.commits.get(s):void 0;if(d&&h&&d.branch===r)throw new Error(`Cannot merge branch '${r}' into itself.`);if(E.records.currBranch===r){const t=new Error('Incorrect usage of "merge". Cannot merge a branch to itself');throw t.hash={text:`merge ${r}`,token:`merge ${r}`,expected:["branch abc"]},t}if(void 0===d||!d){const t=new Error(`Incorrect usage of "merge". Current branch (${E.records.currBranch})has no commits`);throw t.hash={text:`merge ${r}`,token:`merge ${r}`,expected:["commit"]},t}if(!E.records.branches.has(r)){const t=new Error('Incorrect usage of "merge". Branch to be merged ('+r+") does not exist");throw t.hash={text:`merge ${r}`,token:`merge ${r}`,expected:[`branch ${r}`]},t}if(void 0===h||!h){const t=new Error('Incorrect usage of "merge". Branch to be merged ('+r+") has no commits");throw t.hash={text:`merge ${r}`,token:`merge ${r}`,expected:['"commit"']},t}if(d===h){const t=new Error('Incorrect usage of "merge". Both branches have same head');throw t.hash={text:`merge ${r}`,token:`merge ${r}`,expected:["branch abc"]},t}if(e&&E.records.commits.has(e)){const t=new Error('Incorrect usage of "merge". Commit with id:'+e+" already exists, use different custom Id");throw t.hash={text:`merge ${r} ${e} ${o} ${null==n?void 0:n.join(" ")}`,token:`merge ${r} ${e} ${o} ${null==n?void 0:n.join(" ")}`,expected:[`merge ${r} ${e}_UNIQUE ${o} ${null==n?void 0:n.join(" ")}`]},t}const m=s||"",$={id:e||`${E.records.seq}-${k()}`,message:`merged branch ${r} into ${E.records.currBranch}`,seq:E.records.seq++,parents:null==E.records.head?[]:[E.records.head.id,m],branch:E.records.currBranch,type:w.MERGE,customType:o,customId:!!e,tags:n??[]};E.records.head=$,E.records.commits.set($.id,$),E.records.branches.set(E.records.currBranch,$.id),c.debug(E.records.branches),c.debug("in mergeBranch")}),"merge"),G=o((function(t){let r=t.id,e=t.targetId,o=t.tags,n=t.parent;c.debug("Entering cherryPick:",r,e,o);const a=v();if(r=g.sanitizeText(r,a),e=g.sanitizeText(e,a),o=null==o?void 0:o.map((t=>g.sanitizeText(t,a))),n=g.sanitizeText(n,a),!r||!E.records.commits.has(r)){const t=new Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');throw t.hash={text:`cherryPick ${r} ${e}`,token:`cherryPick ${r} ${e}`,expected:["cherry-pick abc"]},t}const i=E.records.commits.get(r);if(void 0===i||!i)throw new Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');if(n&&(!Array.isArray(i.parents)||!i.parents.includes(n))){throw new Error("Invalid operation: The specified parent commit is not an immediate parent of the cherry-picked commit.")}const s=i.branch;if(i.type===w.MERGE&&!n){throw new Error("Incorrect usage of cherry-pick: If the source commit is a merge commit, an immediate parent commit must be specified.")}if(!e||!E.records.commits.has(e)){if(s===E.records.currBranch){const t=new Error('Incorrect usage of "cherryPick". Source commit is already on current branch');throw t.hash={text:`cherryPick ${r} ${e}`,token:`cherryPick ${r} ${e}`,expected:["cherry-pick abc"]},t}const t=E.records.branches.get(E.records.currBranch);if(void 0===t||!t){const t=new Error(`Incorrect usage of "cherry-pick". Current branch (${E.records.currBranch})has no commits`);throw t.hash={text:`cherryPick ${r} ${e}`,token:`cherryPick ${r} ${e}`,expected:["cherry-pick abc"]},t}const a=E.records.commits.get(t);if(void 0===a||!a){const t=new Error(`Incorrect usage of "cherry-pick". Current branch (${E.records.currBranch})has no commits`);throw t.hash={text:`cherryPick ${r} ${e}`,token:`cherryPick ${r} ${e}`,expected:["cherry-pick abc"]},t}const d={id:E.records.seq+"-"+k(),message:`cherry-picked ${null==i?void 0:i.message} into ${E.records.currBranch}`,seq:E.records.seq++,parents:null==E.records.head?[]:[E.records.head.id,i.id],branch:E.records.currBranch,type:w.CHERRY_PICK,tags:o?o.filter(Boolean):[`cherry-pick:${i.id}${i.type===w.MERGE?`|parent:${n}`:""}`]};E.records.head=d,E.records.commits.set(d.id,d),E.records.branches.set(E.records.currBranch,d.id),c.debug(E.records.branches),c.debug("in cherryPick")}}),"cherryPick"),j=o((function(t){if(t=g.sanitizeText(t,v()),!E.records.branches.has(t)){const r=new Error(`Trying to checkout branch which is not yet created. (Help try using "branch ${t}")`);throw r.hash={text:`checkout ${t}`,token:`checkout ${t}`,expected:[`branch ${t}`]},r}{E.records.currBranch=t;const r=E.records.branches.get(E.records.currBranch);E.records.head=void 0!==r&&r?E.records.commits.get(r)??null:null}}),"checkout");function A(t,r,e){const o=t.indexOf(r);-1===o?t.push(e):t.splice(o,1,e)}function O(t){const r=t.reduce(((t,r)=>t.seq>r.seq?t:r),t[0]);let e="";t.forEach((function(t){e+=t===r?"\t*":"\t|"}));const o=[e,r.id,r.seq];for(const n in E.records.branches)E.records.branches.get(n)===r.id&&o.push(n);if(c.debug(o.join(" ")),r.parents&&2==r.parents.length&&r.parents[0]&&r.parents[1]){const e=E.records.commits.get(r.parents[0]);A(t,r,e),r.parents[1]&&t.push(E.records.commits.get(r.parents[1]))}else{if(0==r.parents.length)return;if(r.parents[0]){const e=E.records.commits.get(r.parents[0]);A(t,r,e)}}O(t=C(t,(t=>t.id)))}o(A,"upsert"),o(O,"prettyPrintCommitHistory");var q=o((function(){c.debug(E.records.commits);O([N()[0]])}),"prettyPrint"),H=o((function(){E.reset(),y()}),"clear"),z=o((function(){return[...E.records.branchConfig.values()].map(((t,r)=>null!==t.order&&void 0!==t.order?t:{...t,order:parseFloat(`0.${r}`)})).sort(((t,r)=>(t.order??0)-(r.order??0))).map((({name:t})=>({name:t})))}),"getBranchesAsObjArray"),S=o((function(){return E.records.branches}),"getBranches"),D=o((function(){return E.records.commits}),"getCommits"),N=o((function(){const t=[...E.records.commits.values()];return t.forEach((function(t){c.debug(t.id)})),t.sort(((t,r)=>t.seq-r.seq)),t}),"getCommitsArray"),W={commitType:w,getConfig:v,setDirection:L,setOptions:T,getOptions:M,commit:P,branch:R,merge:I,cherryPick:G,checkout:j,prettyPrint:q,clear:H,getBranchesAsObjArray:z,getBranches:S,getCommits:D,getCommitsArray:N,getCurrentBranch:o((function(){return E.records.currBranch}),"getCurrentBranch"),getDirection:o((function(){return E.records.direction}),"getDirection"),getHead:o((function(){return E.records.head}),"getHead"),setAccTitle:d,getAccTitle:h,getAccDescription:m,setAccDescription:$,setDiagramTitle:l,getDiagramTitle:p},_=o(((r,e)=>{t(r,e),r.dir&&e.setDirection(r.dir);for(const t of r.statements)F(t,e)}),"populate"),F=o(((t,r)=>{const e={Commit:o((t=>r.commit(K(t))),"Commit"),Branch:o((t=>r.branch(Y(t))),"Branch"),Merge:o((t=>r.merge(U(t))),"Merge"),Checkout:o((t=>r.checkout(V(t))),"Checkout"),CherryPicking:o((t=>r.cherryPick(J(t))),"CherryPicking")}[t.$type];e?e(t):c.error(`Unknown statement type: ${t.$type}`)}),"parseStatement"),K=o((t=>({id:t.id,msg:t.message??"",type:void 0!==t.type?w[t.type]:w.NORMAL,tags:t.tags??void 0})),"parseCommit"),Y=o((t=>({name:t.name,order:t.order??0})),"parseBranch"),U=o((t=>({branch:t.branch,id:t.id??"",type:void 0!==t.type?w[t.type]:void 0,tags:t.tags??void 0})),"parseMerge"),V=o((t=>t.branch),"parseCheckout"),J=o((t=>{var r;return{id:t.id,targetId:"",tags:0===(null==(r=t.tags)?void 0:r.length)?void 0:t.tags,parent:t.parent}}),"parseCherryPicking"),Q={parse:o((async t=>{const r=await b("gitGraph",t);c.debug(r),_(r,W)}),"parse")},X=n(),Z=null==X?void 0:X.gitGraph,tt=10,rt=40,et=new Map,ot=new Map,nt=new Map,at=[],it=0,st="LR",ct=o((()=>{et.clear(),ot.clear(),nt.clear(),it=0,at=[],st="LR"}),"clear"),dt=o((t=>{const r=document.createElementNS("http://www.w3.org/2000/svg","text");return("string"==typeof t?t.split(/\\n|\n|<br\s*\/?>/gi):t).forEach((t=>{const e=document.createElementNS("http://www.w3.org/2000/svg","tspan");e.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve"),e.setAttribute("dy","1em"),e.setAttribute("x","0"),e.setAttribute("class","row"),e.textContent=t.trim(),r.appendChild(e)})),r}),"drawText"),ht=o((t=>{let r,e,n;return"BT"===st?(e=o(((t,r)=>t<=r),"comparisonFunc"),n=1/0):(e=o(((t,r)=>t>=r),"comparisonFunc"),n=0),t.forEach((t=>{var o,a;const i="TB"===st||"BT"==st?null==(o=ot.get(t))?void 0:o.y:null==(a=ot.get(t))?void 0:a.x;void 0!==i&&e(i,n)&&(r=t,n=i)})),r}),"findClosestParent"),mt=o((t=>{let r="",e=1/0;return t.forEach((t=>{const o=ot.get(t).y;o<=e&&(r=t,e=o)})),r||void 0}),"findClosestParentBT"),$t=o(((t,r,e)=>{let o=e,n=e;const a=[];t.forEach((t=>{const e=r.get(t);if(!e)throw new Error(`Commit not found for key ${t}`);e.parents.length?(o=pt(e),n=Math.max(o,n)):a.push(e),gt(e,o)})),o=n,a.forEach((t=>{yt(t,o,e)})),t.forEach((t=>{const e=r.get(t);if(null==e?void 0:e.parents.length){const t=mt(e.parents);o=ot.get(t).y-rt,o<=n&&(n=o);const r=et.get(e.branch).pos,a=o-tt;ot.set(e.id,{x:r,y:a})}}))}),"setParallelBTPos"),lt=o((t=>{var r;const e=ht(t.parents.filter((t=>null!==t)));if(!e)throw new Error(`Closest parent not found for commit ${t.id}`);const o=null==(r=ot.get(e))?void 0:r.y;if(void 0===o)throw new Error(`Closest parent position not found for commit ${t.id}`);return o}),"findClosestParentPos"),pt=o((t=>lt(t)+rt),"calculateCommitPosition"),gt=o(((t,r)=>{const e=et.get(t.branch);if(!e)throw new Error(`Branch not found for commit ${t.id}`);const o=e.pos,n=r+tt;return ot.set(t.id,{x:o,y:n}),{x:o,y:n}}),"setCommitPosition"),yt=o(((t,r,e)=>{const o=et.get(t.branch);if(!o)throw new Error(`Branch not found for commit ${t.id}`);const n=r+e,a=o.pos;ot.set(t.id,{x:a,y:n})}),"setRootPosition"),xt=o(((t,r,e,o,n,a)=>{if(a===w.HIGHLIGHT)t.append("rect").attr("x",e.x-10).attr("y",e.y-10).attr("width",20).attr("height",20).attr("class",`commit ${r.id} commit-highlight${n%8} ${o}-outer`),t.append("rect").attr("x",e.x-6).attr("y",e.y-6).attr("width",12).attr("height",12).attr("class",`commit ${r.id} commit${n%8} ${o}-inner`);else if(a===w.CHERRY_PICK)t.append("circle").attr("cx",e.x).attr("cy",e.y).attr("r",10).attr("class",`commit ${r.id} ${o}`),t.append("circle").attr("cx",e.x-3).attr("cy",e.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${r.id} ${o}`),t.append("circle").attr("cx",e.x+3).attr("cy",e.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${r.id} ${o}`),t.append("line").attr("x1",e.x+3).attr("y1",e.y+1).attr("x2",e.x).attr("y2",e.y-5).attr("stroke","#fff").attr("class",`commit ${r.id} ${o}`),t.append("line").attr("x1",e.x-3).attr("y1",e.y+1).attr("x2",e.x).attr("y2",e.y-5).attr("stroke","#fff").attr("class",`commit ${r.id} ${o}`);else{const i=t.append("circle");if(i.attr("cx",e.x),i.attr("cy",e.y),i.attr("r",r.type===w.MERGE?9:10),i.attr("class",`commit ${r.id} commit${n%8}`),a===w.MERGE){const a=t.append("circle");a.attr("cx",e.x),a.attr("cy",e.y),a.attr("r",6),a.attr("class",`commit ${o} ${r.id} commit${n%8}`)}if(a===w.REVERSE){t.append("path").attr("d",`M ${e.x-5},${e.y-5}L${e.x+5},${e.y+5}M${e.x-5},${e.y+5}L${e.x+5},${e.y-5}`).attr("class",`commit ${o} ${r.id} commit${n%8}`)}}}),"drawCommitBullet"),ut=o(((t,r,e,o)=>{var n;if(r.type!==w.CHERRY_PICK&&(r.customId&&r.type===w.MERGE||r.type!==w.MERGE)&&(null==Z?void 0:Z.showCommitLabel)){const a=t.append("g"),i=a.insert("rect").attr("class","commit-label-bkg"),s=a.append("text").attr("x",o).attr("y",e.y+25).attr("class","commit-label").text(r.id),c=null==(n=s.node())?void 0:n.getBBox();if(c&&(i.attr("x",e.posWithOffset-c.width/2-2).attr("y",e.y+13.5).attr("width",c.width+4).attr("height",c.height+4),"TB"===st||"BT"===st?(i.attr("x",e.x-(c.width+16+5)).attr("y",e.y-12),s.attr("x",e.x-(c.width+16)).attr("y",e.y+c.height-12)):s.attr("x",e.posWithOffset-c.width/2),Z.rotateCommitLabel))if("TB"===st||"BT"===st)s.attr("transform","rotate(-45, "+e.x+", "+e.y+")"),i.attr("transform","rotate(-45, "+e.x+", "+e.y+")");else{const t=-7.5-(c.width+10)/25*9.5,r=10+c.width/25*8.5;a.attr("transform","translate("+t+", "+r+") rotate(-45, "+o+", "+e.y+")")}}}),"drawCommitLabel"),ft=o(((t,r,e,o)=>{var n;if(r.tags.length>0){let a=0,i=0,s=0;const c=[];for(const o of r.tags.reverse()){const r=t.insert("polygon"),d=t.append("circle"),h=t.append("text").attr("y",e.y-16-a).attr("class","tag-label").text(o),m=null==(n=h.node())?void 0:n.getBBox();if(!m)throw new Error("Tag bbox not found");i=Math.max(i,m.width),s=Math.max(s,m.height),h.attr("x",e.posWithOffset-m.width/2),c.push({tag:h,hole:d,rect:r,yOffset:a}),a+=20}for(const{tag:t,hole:r,rect:n,yOffset:d}of c){const a=s/2,c=e.y-19.2-d;if(n.attr("class","tag-label-bkg").attr("points",`\n      ${o-i/2-2},${c+2}  \n      ${o-i/2-2},${c-2}\n      ${e.posWithOffset-i/2-4},${c-a-2}\n      ${e.posWithOffset+i/2+4},${c-a-2}\n      ${e.posWithOffset+i/2+4},${c+a+2}\n      ${e.posWithOffset-i/2-4},${c+a+2}`),r.attr("cy",c).attr("cx",o-i/2+2).attr("r",1.5).attr("class","tag-hole"),"TB"===st||"BT"===st){const s=o+d;n.attr("class","tag-label-bkg").attr("points",`\n        ${e.x},${s+2}\n        ${e.x},${s-2}\n        ${e.x+tt},${s-a-2}\n        ${e.x+tt+i+4},${s-a-2}\n        ${e.x+tt+i+4},${s+a+2}\n        ${e.x+tt},${s+a+2}`).attr("transform","translate(12,12) rotate(45, "+e.x+","+o+")"),r.attr("cx",e.x+2).attr("cy",s).attr("transform","translate(12,12) rotate(45, "+e.x+","+o+")"),t.attr("x",e.x+5).attr("y",s+3).attr("transform","translate(14,14) rotate(45, "+e.x+","+o+")")}}}}),"drawCommitTags"),bt=o((t=>{switch(t.customType??t.type){case w.NORMAL:return"commit-normal";case w.REVERSE:return"commit-reverse";case w.HIGHLIGHT:return"commit-highlight";case w.MERGE:return"commit-merge";case w.CHERRY_PICK:return"commit-cherry-pick";default:return"commit-normal"}}),"getCommitClassType"),wt=o(((t,r,e,o)=>{const n={x:0,y:0};if(!(t.parents.length>0)){if("TB"===r)return 30;if("BT"===r){return(o.get(t.id)??n).y-rt}return 0}{const e=ht(t.parents);if(e){const a=o.get(e)??n;if("TB"===r)return a.y+rt;if("BT"===r){return(o.get(t.id)??n).y-rt}return a.x+rt}}return 0}),"calculatePosition"),Bt=o(((t,r,e)=>{var o,n;const a="BT"===st&&e?r:r+tt,i="TB"===st||"BT"===st?a:null==(o=et.get(t.branch))?void 0:o.pos,s="TB"===st||"BT"===st?null==(n=et.get(t.branch))?void 0:n.pos:a;if(void 0===s||void 0===i)throw new Error(`Position were undefined for commit ${t.id}`);return{x:s,y:i,posWithOffset:a}}),"getCommitPosition"),vt=o(((t,r,e)=>{if(!Z)throw new Error("GitGraph config not found");const n=t.append("g").attr("class","commit-bullets"),a=t.append("g").attr("class","commit-labels");let i="TB"===st||"BT"===st?30:0;const s=[...r.keys()],c=(null==Z?void 0:Z.parallelCommits)??!1,d=o(((t,e)=>{var o,n;const a=null==(o=r.get(t))?void 0:o.seq,i=null==(n=r.get(e))?void 0:n.seq;return void 0!==a&&void 0!==i?a-i:0}),"sortKeys");let h=s.sort(d);"BT"===st&&(c&&$t(h,r,i),h=h.reverse()),h.forEach((t=>{var o;const s=r.get(t);if(!s)throw new Error(`Commit not found for key ${t}`);c&&(i=wt(s,st,i,ot));const d=Bt(s,i,c);if(e){const t=bt(s),r=s.customType??s.type,e=(null==(o=et.get(s.branch))?void 0:o.index)??0;xt(n,s,d,t,e,r),ut(a,s,d,i),ft(a,s,d,i)}"TB"===st||"BT"===st?ot.set(s.id,{x:d.x,y:d.posWithOffset}):ot.set(s.id,{x:d.posWithOffset,y:d.y}),i="BT"===st&&c?i+rt:i+rt+tt,i>it&&(it=i)}))}),"drawCommits"),Et=o(((t,r,e,n,a)=>{const i=("TB"===st||"BT"===st?e.x<n.x:e.y<n.y)?r.branch:t.branch,s=o((t=>t.branch===i),"isOnBranchToGetCurve"),c=o((e=>e.seq>t.seq&&e.seq<r.seq),"isBetweenCommits");return[...a.values()].some((t=>c(t)&&s(t)))}),"shouldRerouteArrow"),kt=o(((t,r,e=0)=>{const o=t+Math.abs(t-r)/2;if(e>5)return o;if(at.every((t=>Math.abs(t-o)>=10)))return at.push(o),o;const n=Math.abs(t-r);return kt(t,r-n/5,e+1)}),"findLane"),Ct=o(((t,r,e,o)=>{var n,a,i,s,c;const d=ot.get(r.id),h=ot.get(e.id);if(void 0===d||void 0===h)throw new Error(`Commit positions not found for commits ${r.id} and ${e.id}`);const m=Et(r,e,d,h,o);let $,l="",p="",g=0,y=0,x=null==(n=et.get(e.branch))?void 0:n.index;if(e.type===w.MERGE&&r.id!==e.parents[0]&&(x=null==(a=et.get(r.branch))?void 0:a.index),m){l="A 10 10, 0, 0, 0,",p="A 10 10, 0, 0, 1,",g=10,y=10;const t=d.y<h.y?kt(d.y,h.y):kt(h.y,d.y),e=d.x<h.x?kt(d.x,h.x):kt(h.x,d.x);"TB"===st?d.x<h.x?$=`M ${d.x} ${d.y} L ${e-g} ${d.y} ${p} ${e} ${d.y+y} L ${e} ${h.y-g} ${l} ${e+y} ${h.y} L ${h.x} ${h.y}`:(x=null==(i=et.get(r.branch))?void 0:i.index,$=`M ${d.x} ${d.y} L ${e+g} ${d.y} ${l} ${e} ${d.y+y} L ${e} ${h.y-g} ${p} ${e-y} ${h.y} L ${h.x} ${h.y}`):"BT"===st?d.x<h.x?$=`M ${d.x} ${d.y} L ${e-g} ${d.y} ${l} ${e} ${d.y-y} L ${e} ${h.y+g} ${p} ${e+y} ${h.y} L ${h.x} ${h.y}`:(x=null==(s=et.get(r.branch))?void 0:s.index,$=`M ${d.x} ${d.y} L ${e+g} ${d.y} ${p} ${e} ${d.y-y} L ${e} ${h.y+g} ${l} ${e-y} ${h.y} L ${h.x} ${h.y}`):d.y<h.y?$=`M ${d.x} ${d.y} L ${d.x} ${t-g} ${l} ${d.x+y} ${t} L ${h.x-g} ${t} ${p} ${h.x} ${t+y} L ${h.x} ${h.y}`:(x=null==(c=et.get(r.branch))?void 0:c.index,$=`M ${d.x} ${d.y} L ${d.x} ${t+g} ${p} ${d.x+y} ${t} L ${h.x-g} ${t} ${l} ${h.x} ${t-y} L ${h.x} ${h.y}`)}else l="A 20 20, 0, 0, 0,",p="A 20 20, 0, 0, 1,",g=20,y=20,"TB"===st?(d.x<h.x&&($=e.type===w.MERGE&&r.id!==e.parents[0]?`M ${d.x} ${d.y} L ${d.x} ${h.y-g} ${l} ${d.x+y} ${h.y} L ${h.x} ${h.y}`:`M ${d.x} ${d.y} L ${h.x-g} ${d.y} ${p} ${h.x} ${d.y+y} L ${h.x} ${h.y}`),d.x>h.x&&(l="A 20 20, 0, 0, 0,",p="A 20 20, 0, 0, 1,",g=20,y=20,$=e.type===w.MERGE&&r.id!==e.parents[0]?`M ${d.x} ${d.y} L ${d.x} ${h.y-g} ${p} ${d.x-y} ${h.y} L ${h.x} ${h.y}`:`M ${d.x} ${d.y} L ${h.x+g} ${d.y} ${l} ${h.x} ${d.y+y} L ${h.x} ${h.y}`),d.x===h.x&&($=`M ${d.x} ${d.y} L ${h.x} ${h.y}`)):"BT"===st?(d.x<h.x&&($=e.type===w.MERGE&&r.id!==e.parents[0]?`M ${d.x} ${d.y} L ${d.x} ${h.y+g} ${p} ${d.x+y} ${h.y} L ${h.x} ${h.y}`:`M ${d.x} ${d.y} L ${h.x-g} ${d.y} ${l} ${h.x} ${d.y-y} L ${h.x} ${h.y}`),d.x>h.x&&(l="A 20 20, 0, 0, 0,",p="A 20 20, 0, 0, 1,",g=20,y=20,$=e.type===w.MERGE&&r.id!==e.parents[0]?`M ${d.x} ${d.y} L ${d.x} ${h.y+g} ${l} ${d.x-y} ${h.y} L ${h.x} ${h.y}`:`M ${d.x} ${d.y} L ${h.x-g} ${d.y} ${l} ${h.x} ${d.y-y} L ${h.x} ${h.y}`),d.x===h.x&&($=`M ${d.x} ${d.y} L ${h.x} ${h.y}`)):(d.y<h.y&&($=e.type===w.MERGE&&r.id!==e.parents[0]?`M ${d.x} ${d.y} L ${h.x-g} ${d.y} ${p} ${h.x} ${d.y+y} L ${h.x} ${h.y}`:`M ${d.x} ${d.y} L ${d.x} ${h.y-g} ${l} ${d.x+y} ${h.y} L ${h.x} ${h.y}`),d.y>h.y&&($=e.type===w.MERGE&&r.id!==e.parents[0]?`M ${d.x} ${d.y} L ${h.x-g} ${d.y} ${l} ${h.x} ${d.y-y} L ${h.x} ${h.y}`:`M ${d.x} ${d.y} L ${d.x} ${h.y+g} ${p} ${d.x+y} ${h.y} L ${h.x} ${h.y}`),d.y===h.y&&($=`M ${d.x} ${d.y} L ${h.x} ${h.y}`));if(void 0===$)throw new Error("Line definition not found");t.append("path").attr("d",$).attr("class","arrow arrow"+x%8)}),"drawArrow"),Lt=o(((t,r)=>{const e=t.append("g").attr("class","commit-arrows");[...r.keys()].forEach((t=>{const o=r.get(t);o.parents&&o.parents.length>0&&o.parents.forEach((t=>{Ct(e,r.get(t),o,r)}))}))}),"drawArrows"),Tt=o(((t,r)=>{const e=t.append("g");r.forEach(((t,r)=>{var o;const n=r%8,a=null==(o=et.get(t.name))?void 0:o.pos;if(void 0===a)throw new Error(`Position not found for branch ${t.name}`);const i=e.append("line");i.attr("x1",0),i.attr("y1",a),i.attr("x2",it),i.attr("y2",a),i.attr("class","branch branch"+n),"TB"===st?(i.attr("y1",30),i.attr("x1",a),i.attr("y2",it),i.attr("x2",a)):"BT"===st&&(i.attr("y1",it),i.attr("x1",a),i.attr("y2",30),i.attr("x2",a)),at.push(a);const s=t.name,c=dt(s),d=e.insert("rect"),h=e.insert("g").attr("class","branchLabel").insert("g").attr("class","label branch-label"+n);h.node().appendChild(c);const m=c.getBBox();d.attr("class","branchLabelBkg label"+n).attr("rx",4).attr("ry",4).attr("x",-m.width-4-(!0===(null==Z?void 0:Z.rotateCommitLabel)?30:0)).attr("y",-m.height/2+8).attr("width",m.width+18).attr("height",m.height+4),h.attr("transform","translate("+(-m.width-14-(!0===(null==Z?void 0:Z.rotateCommitLabel)?30:0))+", "+(a-m.height/2-1)+")"),"TB"===st?(d.attr("x",a-m.width/2-10).attr("y",0),h.attr("transform","translate("+(a-m.width/2-5)+", 0)")):"BT"===st?(d.attr("x",a-m.width/2-10).attr("y",it),h.attr("transform","translate("+(a-m.width/2-5)+", "+it+")")):d.attr("transform","translate(-19, "+(a-m.height/2)+")")}))}),"drawBranches"),Mt=o((function(t,r,e,o,n){return et.set(t,{pos:r,index:e}),r+=50+(n?40:0)+("TB"===st||"BT"===st?o.width/2:0)}),"setBranchPosition"),Pt={parser:Q,db:W,renderer:{draw:o((function(t,r,e,o){if(ct(),c.debug("in gitgraph renderer",t+"\n","id:",r,e),!Z)throw new Error("GitGraph config not found");const n=Z.rotateCommitLabel??!1,a=o.db;nt=a.getCommits();const i=a.getBranchesAsObjArray();st=a.getDirection();const s=x(`[id="${r}"]`);let d=0;i.forEach(((t,r)=>{var e;const o=dt(t.name),a=s.append("g"),i=a.insert("g").attr("class","branchLabel"),c=i.insert("g").attr("class","label branch-label");null==(e=c.node())||e.appendChild(o);const h=o.getBBox();d=Mt(t.name,d,r,h,n),c.remove(),i.remove(),a.remove()})),vt(s,nt,!1),Z.showBranches&&Tt(s,i),Lt(s,nt),vt(s,nt,!0),u.insertTitle(s,"gitTitleText",Z.titleTopMargin??0,a.getDiagramTitle()),f(void 0,s,Z.diagramPadding,Z.useMaxWidth)}),"draw")},styles:o((t=>`\n  .commit-id,\n  .commit-msg,\n  .branch-label {\n    fill: lightgrey;\n    color: lightgrey;\n    font-family: 'trebuchet ms', verdana, arial, sans-serif;\n    font-family: var(--mermaid-font-family);\n  }\n  ${[0,1,2,3,4,5,6,7].map((r=>`\n        .branch-label${r} { fill: ${t["gitBranchLabel"+r]}; }\n        .commit${r} { stroke: ${t["git"+r]}; fill: ${t["git"+r]}; }\n        .commit-highlight${r} { stroke: ${t["gitInv"+r]}; fill: ${t["gitInv"+r]}; }\n        .label${r}  { fill: ${t["git"+r]}; }\n        .arrow${r} { stroke: ${t["git"+r]}; }\n        `)).join("\n")}\n\n  .branch {\n    stroke-width: 1;\n    stroke: ${t.lineColor};\n    stroke-dasharray: 2;\n  }\n  .commit-label { font-size: ${t.commitLabelFontSize}; fill: ${t.commitLabelColor};}\n  .commit-label-bkg { font-size: ${t.commitLabelFontSize}; fill: ${t.commitLabelBackground}; opacity: 0.5; }\n  .tag-label { font-size: ${t.tagLabelFontSize}; fill: ${t.tagLabelColor};}\n  .tag-label-bkg { fill: ${t.tagLabelBackground}; stroke: ${t.tagLabelBorder}; }\n  .tag-hole { fill: ${t.textColor}; }\n\n  .commit-merge {\n    stroke: ${t.primaryColor};\n    fill: ${t.primaryColor};\n  }\n  .commit-reverse {\n    stroke: ${t.primaryColor};\n    fill: ${t.primaryColor};\n    stroke-width: 3;\n  }\n  .commit-highlight-outer {\n  }\n  .commit-highlight-inner {\n    stroke: ${t.primaryColor};\n    fill: ${t.primaryColor};\n  }\n\n  .arrow { stroke-width: 8; stroke-linecap: round; fill: none}\n  .gitTitleText {\n    text-anchor: middle;\n    font-size: 18px;\n    fill: ${t.textColor};\n  }\n`),"getStyles")};export{Pt as diagram};
