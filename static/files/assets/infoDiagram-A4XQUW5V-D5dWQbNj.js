import{_ as r,l as i,I as t,k as e,K as s}from"./index-BdBJDoqm.js";import{p as o}from"./gitGraph-YCYPL57B-BBBOe5ge.js";import"./index-CP9bbISh.js";import"./vue-CE51Rq-N.js";import"./arco-CSlgBs8T.js";/* empty css              *//* empty css              *//* empty css              *//* empty css              */import"./dom-w3hEyMar.js";import"./index-DLevhAQE.js";import"./dataModel-BAnfpXEG.js";import"./editor-erg3WYaJ.js";import"./file-5T113FlP.js";import"./dom2imgBlob-9Y9ueTAB.js";import"./mitt-DRzrVJO_.js";import"./regexp-get-flags-C7Uvd9jb.js";import"./index.esm-CMCG6-Sp.js";import"./_baseUniq-Bxycm4Lg.js";import"./_basePickBy-D9epjIkN.js";import"./clone-CQn5Fs9O.js";var p={version:s},a={parser:{parse:r((async r=>{const t=await o("info",r);i.debug(t)}),"parse")},db:{getVersion:r((()=>p.version),"getVersion")},renderer:{draw:r(((r,s,o)=>{i.debug("rendering info diagram\n"+r);const p=t(s);e(p,100,400,!0);p.append("g").append("text").attr("x",100).attr("y",40).attr("class","version").attr("font-size",32).style("text-anchor","middle").text(`v${o}`)}),"draw")}};export{a as diagram};
